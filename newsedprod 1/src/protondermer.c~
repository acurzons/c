#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "structure.h"
#include "constant.h"
#include <string.h>
#include "globalparameters.h"
#include "protondistributionlib.h"
#include "protonSEDlibdermer.h"
#include "protonSEDlib.h"


void ppinteractiongammadermer(){
  /*This functions aims at getting the main secondary electrons+neutrinos+gamma-ray from the given proton energy distribution, we remember that the dynamic array start with GMIN or gamma2 (see Manolakou et al 2007 for gamma2), thus we must expect */

  /*We are reminded that the main  energy unit here is TeV*/

  /*First the gammaloop*/
  int i,j; //loop integer variable
  double dEgamma;
  double dEp,Ep;
  double Tp,dTp;
  double x,dx;
  double *GMINMAX;
  double EGMIN;
  int sizegamma;
  /* for the secondary electron*/
  
  int sizesecelectron;
  
  double dEsec;
  double dEpion,dTpion;
  /*for the neutrino*/
  int sizeneutrino;
  double dEneut;
  double density;
  FILE *pionfile;

  if ((pionfile=fopen("piondata.txt","w+"))==NULL){
    printf("impossible to write data\n");
    exit(1);
  }
  if(source->continuous!=NULL) density=source->continuous->density;
 else if(source->impulsive!=NULL) density=source->impulsive->density;
 GMINMAX=protonGMINGMAX();
 EGMIN=GMINMAX[0]*protonmassTeV;
  // printf("segfault error\n");
 
 
 /*initialisation of the gammaraypp*/
 sizegamma=(int)(20+8)*100/STEP;
  gammaraypp=malloc(sizeof(struct ARRAYSIZE));
  piondata=malloc(sizeof(struct ARRAYSIZE));
  gammaraypp->size=sizegamma;
  piondata->size=sizegamma;

  
  for(i=0;i<2;i++){
    gammaraypp->array[i]=malloc(sizegamma*sizeof(double));
    piondata->array[i]=malloc(sizegamma*sizeof(double));
  }
  for(i=0;i<2;i++){
    for(j=0;j<sizegamma;j++){
      gammaraypp->array[i][j]=0;
      piondata->array[i][j]=0;
    }
  }
 
  /*First the pion  from proton-proton innteraction*/
   
  for(i=0;i<=sizegamma;i++){
     piondata->array[0][i]=pow(10,(double)(i*STEP-2000.0)/100.0);

     dEpion=piondata->array[0][i]*(pow(10,(double)STEP/100.0)-1);
     dTpion=dEpion;
     if (piondata->array[0][i]>=pionmassTeV){
     for(j=0;j<protonarraysize;j++){
       Ep=protondistribution[0][j]*protonmassTeV;
      //printf("Ep=%.3e\n",Ep);
      //dEp=Ep*(pow(10,(double)resolution/100.0)-1); //separation between the 2 energy in array
      dEp=Ep*(pow(10,(double)STEP/100.0)-1); //Raw definition
      Tp=Ep-protonmassTeV;
      dTp=Tp*(pow(10,(double)STEP/100.0)-1);
      if ((Tp>0.2797E-3)&&(piondata->array[0][i]<Tp)) piondata->array[1][i] +=lightspeedcm*density*(protondistribution[1][j])*DermerXS(Ep,piondata->array[0][i])*dTp*1E3;//I may need to release the dTpion if the things bug
     }
     }
     fprintf(pionfile,"%.3e %.3e\n",piondata->array[0][i]-pionmassTeV,piondata->array[1][i]/(4.0/3.0*PI*pow(3.1E18,3))*1E-3);
  }

  fclose(pionfile);
  /*now let's focus on the gamma-ray side*/

  for(i=0;i<=sizegamma;i++){
    gammaraypp->array[0][i]=pow(10,(double)(i*STEP-2000.0)/100.0);

    dEgamma=gammaraypp->array[0][i]*(pow(10,(double)STEP/100.0)-1);
    
    
    //pion distribution
    for(j=0;j<sizegamma;j++){
       dEpion=piondata->array[0][j]*(pow(10,(double)STEP/100.0)-1);
    //DECLARE Dep as a function of the initial energy and the cooling effective time after the age of the system
      //printf("deubug3\n");
      
       if ((piondata->array[0][j]>gammaraypp->array[0][i]+pow(pionmassTeV,2.0)/(4.0*gammaraypp->array[0][i]))&&(piondata->array[0][j]>pionmassTeV)) gammaraypp->array[1][i] +=2.0*(piondata->array[1][j])/sqrt(pow(piondata->array[0][j],2.0)-pow(pionmassTeV,2.0))*dEpion;
    

    }

    

  }

  

sizesecelectron=(int)(20+8)*100/STEP+1;

  secondaryelecpp=malloc(sizeof(struct ARRAYSIZE));
  secondaryelecpp->size=sizesecelectron;
  for(i=0;i<2;i++){
    secondaryelecpp->array[i]=malloc(sizesecelectron*sizeof(double));
  }
  for(i=0;i<2;i++){
    for(j=0;j<sizegamma;j++){
      secondaryelecpp->array[i][j]=0;
    }
  }

  /*The secondary electron coming from proton-proton interaction*/

  
  for(i=0;i<=sizesecelectron;i++){
    secondaryelecpp->array[0][i]=pow(10,(double)(i*STEP-2000)/100.0);

    dEsec=secondaryelecpp->array[0][i]*(pow(10,(double)STEP/100.0)-1);
    
    
    
    
    for(j=0;j<protonarraysize;j++){
      Ep=protondistribution[0][j]*protonmassTeV;
      dEp=Ep*(pow(10,(double)STEP/100.0)-1); //separation between the 2 energy in array

   
      if((Ep>=secondaryelecpp->array[0][i])&&(secondaryelecpp->array[0][i]>electronmassTeV)){
	secondaryelecpp->array[1][i] +=lightspeedcm*density*protondistribution[1][j]*PPCrossSection(Ep)*Felectron(secondaryelecpp->array[0][i]/Ep,Ep)*dEp/Ep;

      }

    }

  }

  /*This part with the neutrino flux will need to be tested thoroughly, I need to look more thoroughly at the method needed to compute the different functions */
  sizeneutrino=28*100.0/STEP+1;
  neutrinospp=malloc(sizeof(struct ARRAYSIZE));
  neutrinospp->size=sizeneutrino;
  for(i=0;i<2;i++){
    neutrinospp->array[i]=malloc(sizeneutrino*sizeof(double));
  }
  for(i=0;i<2;i++){
    for(j=0;j<sizegamma;j++){
      neutrinospp->array[i][j]=0;
    }
  }





for(i=0;i<=sizeneutrino;i++){
    neutrinospp->array[0][i]=pow(10,(double)(i*STEP-8000.0)/100.0);

    dEneut=gammaraypp->array[0][i]*(pow(10,(double)STEP/100.0)-1);
    
    
    
    
    for(j=0;j<protonarraysize;j++){
      Ep=protondistribution[0][j]*protonmassTeV;
      dEp=Ep*(pow(10,(double)STEP/100.0)-1); //separation between the 2 energy in array
      if((Ep>=neutrinospp->array[0][i])&&(neutrinospp->array[0][i]>neutrinomassTeV)){
	neutrinospp->array[1][i] +=lightspeedcm*density*PPCrossSection(Ep)*protondistribution[1][j]*(Fgamma(neutrinospp->array[0][i]/Ep,Ep)+Fneutrino(neutrinospp->array[0][i]/Ep,Ep))*dEp/Ep;

      }

    }

 }

}





  
  





double DermerXS(double Ep, double Epion){
  //pionmass and protonmass are in TeV!
  double Tp, Tpion; //kinetic energy 
  double pp; //momentum
  double s;
  double mchi;
  double eta;
  double XSpp;
  double dNdTpion=0.0;
  double mbaryon,dmbaryon; //in GeV
  double sigmaN;
  Tp=(Ep-protonmassTeV)*1E3;//in GeV
  Tpion=(Epion-pionmassTeV)*1E3; //in GeV
  pp=sqrt(pow(Ep,2.0)-pow(protonmassTeV,2.0))*1E3; //in GeV
  s=2*protonmassTeV*1E3*(Tp+2*protonmassTeV*1E3); // in GeV^2
  mchi=2*protonmassTeV*1E3; //in GeV

  eta=pow(pow(s-pow(pionmassTeV*1E3,2)-pow(mchi,2.0),2.0)-4.0*pow(pionmassTeV*1E3,2.0)*pow(mchi,2.0),0.5)/(2.0*pionmassTeV*1E3*sqrt(s));
  
  /*Now the different threshold for inclusive cross section*/
  if((pp>=0.78)&&(pp<0.96)) XSpp=0.032*pow(eta,2.0)+0.040*pow(eta,6.0)+0.047*pow(eta,8.0);
  else if((pp>=0.96) &&(pp<1.27)) XSpp=32.6*pow(pp-0.8,3.21);
  else if ((pp>=1.27) && (pp<8.0)) XSpp=5.40*pow(pp-0.8,0.81);
  else if (pp>=8.0) {
    XSpp=32.0*log(pp)+48.5*pow(pp,-1.0)-59.5;
  }
  /*result in mb, transform in cm^2*/
  XSpp *=1E-27;

  for (mbaryon=(protonmassTeV+pionmassTeV)*1E3+0.0005; mbaryon<sqrt(s)-protonmassTeV*1E3; mbaryon +=dmbaryon){
    dmbaryon=mbaryon*(pow(10,1.0/1000.0)-1.0);
    //printf("dmbaryon =%.3e\n",dmbaryon);
    if (dmbaryon>sqrt(s)-protonmassTeV*1E3-mbaryon) dmbaryon=sqrt(s)-protonmassTeV*1E3-mbaryon; //condition on critical value
    dNdTpion +=normalisationW(Tp,s)*BWdistribution(mbaryon,Tp,s)* functionStecker(Tpion,Tp,mbaryon,s)*dmbaryon;
    // printf("dNdTpion=%.3e BW= %.3e S=%.3e nW=%.3e\n",dNdTpion,BWdistribution(mbaryon,Tp,s),functionStecker(Tpion,Tp,mbaryon,s),normalisationW(Tp,s)  );

  }
  //printf("dNdTpion=%.3e\n",dNdTpion);
  sigmaN=XSpp*dNdTpion;
  
  return sigmaN;

}


double functionStecker(double Tpion, double Tp, double mbaryon, double s){
  /*all the input parameters are given In GeV*/
  double result=0.0;
  double gammapion=(Tpion+pionmassTeV*1E3)/(pionmassTeV*1E3);
  double gammacritique, betacritique;
  double gammadeltastar,betadeltastar;
  double gammapionprime,betapionprime;
  double gammadeltaplus, betadeltaplus;
  double gammadeltaminus,betadeltaminus;

  gammacritique=sqrt(s)/(2.0*protonmassTeV*1E3);
  betacritique=sqrt(1.0-1.0/pow(gammacritique,2.0));
  gammadeltastar=(s+pow(mbaryon,2.0)-pow(pionmassTeV*1E3,2.0))/(2.0*sqrt(s)*mbaryon);
  betadeltastar=sqrt(1.0-1.0/pow(gammadeltastar,2.0));
  gammapionprime=(pow(mbaryon,2.0)+pow(pionmassTeV*1E3,2.0)-pow(protonmassTeV*1E3,2.0))/(2*mbaryon*pionmassTeV*1E3);

  betapionprime=sqrt(1.0-1.0/pow(gammapionprime,2.0));
  gammadeltaplus=gammacritique*gammadeltastar*(1+betacritique*betadeltastar);
  gammadeltaminus=gammacritique*gammadeltastar*(1-betacritique*betadeltastar);
  betadeltaplus=sqrt(1.0-1.0/pow(gammadeltaplus,2.0));
  
  betadeltaminus=sqrt(1.0-1.0/pow(gammadeltaminus,2.0));

  /*Now we have got all the parameters entered we can output the solution*/

  /*first condition----- first term Eq.7 of Dermer 1986*/

  if((gammapion>=gammadeltaplus*gammapionprime*(1-betadeltaplus*betapionprime))&&(gammapion<=gammadeltaplus*gammapionprime*(1+betadeltaplus*betapionprime))){

    result +=1.0/(2.0*pionmassTeV*1E3)*pow(2.0*betadeltaplus*gammadeltaplus*betapionprime*gammapionprime,-1.0);
  }
    
  if((gammapion>=gammadeltaminus*gammapionprime*(1-betadeltaminus*betapionprime))&&(gammapion<=gammadeltaminus*gammapionprime*(1+betadeltaminus*betapionprime))){
   
   result +=1.0/(2.0*pionmassTeV*1E3)*pow(2.0*betadeltaminus*gammadeltaminus*betapionprime*gammapionprime,-1.0);
  }
  return result;
}

double BWdistribution(double mbaryon, double Tp,double s){
  /*input in GeV*/
  double distribution;
  double lbreath=1.0/2.0*0.115; //GeV
  distribution=normalisationW(Tp,s)*lbreath/PI*pow(pow(mbaryon-baryonmassTeV*1E3,2.0)+pow(lbreath,2.0),-1.0);
  
  return distribution;
}

double normalisationW(double Tp,double s){
  /*input in GeV, GeV^2*/

  double w;
  double lbreath=1.0/2.0*0.115; //GeV
  w=PI*pow(atan((sqrt(s)-protonmassTeV*1E3-baryonmassTeV*1E3)/lbreath)-atan((protonmassTeV*1E3+pionmassTeV*1E3-baryonmassTeV*1E3)/lbreath),-1.0);
  //printf(" result%.3e\n",w);
    return w;
}




